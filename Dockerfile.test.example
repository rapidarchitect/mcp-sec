# Multi-stage Dockerfile for MCP PKI Authentication System testing
# This is an example - adapt based on chosen implementation language(s)

FROM ubuntu:22.04 AS base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    git \
    build-essential \
    libsodium-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Python testing environment
FROM base AS python-test
RUN apt-get update && apt-get install -y python3 python3-pip python3-venv \
    && rm -rf /var/lib/apt/lists/*
WORKDIR /workspace
COPY requirements-test.txt* ./
RUN python3 -m pip install --upgrade pip && \
    python3 -m pip install pytest pytest-benchmark pytest-asyncio cryptography

# Go testing environment  
FROM base AS go-test
RUN curl -fsSL https://go.dev/dl/go1.21.0.linux-amd64.tar.gz | tar -xz -C /usr/local
ENV PATH="/usr/local/go/bin:${PATH}"
WORKDIR /workspace
COPY go.mod* go.sum* ./
RUN if [ -f go.mod ]; then go mod download; fi

# Node.js testing environment
FROM base AS nodejs-test
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    rm -rf /var/lib/apt/lists/*
WORKDIR /workspace
COPY package*.json ./
RUN if [ -f package.json ]; then npm ci; fi

# Rust testing environment
FROM base AS rust-test
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"
WORKDIR /workspace
COPY Cargo.toml* Cargo.lock* ./
RUN if [ -f Cargo.toml ]; then cargo fetch; fi

# Final multi-language testing image
FROM base AS test
# Copy language tools from respective stages
COPY --from=python-test /usr/local /usr/local
COPY --from=go-test /usr/local/go /usr/local/go
COPY --from=nodejs-test /usr/bin/node /usr/bin/node
COPY --from=nodejs-test /usr/bin/npm /usr/bin/npm
COPY --from=rust-test /root/.cargo /root/.cargo

# Add all language tools to PATH
ENV PATH="/usr/local/go/bin:/root/.cargo/bin:${PATH}"

# Install cross-language testing tools
RUN python3 -m pip install pytest-xdist pytest-html && \
    npm install -g jest mocha && \
    cargo install --locked cargo-tarpaulin

# Set up workspace
WORKDIR /workspace
COPY . .

# Default command runs all tests
CMD ["make", "test-all"]